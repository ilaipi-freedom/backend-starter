generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// 企业
model Corporation {
  id              String          @id @default(cuid())
  name            String          @unique
  remark          String?         @db.Text
  status          AvailableStatus @default(normal)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @default(now()) @updatedAt
  roles           Role[]
  accounts        Account[]
  sysDicts        SysDict[]
  sysDictDataList SysDictData[]
  depts           Dept[]
}

model Dept {
  id           String          @id @default(cuid())
  corpId       String
  name         String
  parentDeptId String?
  remark       String?         @db.Text
  status       AvailableStatus @default(normal)
  sort         Float?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @default(now()) @updatedAt

  parentDept Dept?       @relation("Dept_parent_Dept", fields: [parentDeptId], references: [id], onDelete: Cascade)
  children   Dept[]      @relation("Dept_parent_Dept")
  corp       Corporation @relation(fields: [corpId], references: [id], onDelete: Cascade)
}

/// 用户角色
model Role {
  id             String           @id @default(cuid())
  corpId         String
  name           String // 角色名称
  perm           String           @unique() // 权限字符 唯一
  route          String? // 默认路由
  status         AvailableStatus  @default(normal)
  remark         String?          @db.Text
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now()) @updatedAt
  accounts       Account[]
  corp           Corporation      @relation(fields: [corpId], references: [id], onDelete: Cascade)
  menuConfigList RoleMenuConfig[]
}

/// 用户
model Account {
  id        String          @id @default(cuid())
  corpId    String
  roleId    String
  status    AvailableStatus @default(normal)
  name      String
  phone     String?         @unique
  username  String          @unique
  password  String
  remark    String?         @db.Text
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  role      Role            @relation(fields: [roleId], references: [id], onDelete: Cascade)
  corp      Corporation     @relation(fields: [corpId], references: [id], onDelete: Cascade)
}

/// 菜单
model SysMenu {
  id           String      @id @default(cuid())
  type         SysMenuType
  name         String // 路由名称，必须设置且唯一
  parentMenuId String?
  meta         Json? // 元数据，包含 title、icon、activeIcon、badgeType、badge、badgeVariants、keepAlive、hideInMenu、hideChildrenInMenu、hideInBreadcrumb、hideInTab、affixTab、link 等信息
  path         String // URL 路径
  activePath   String? // 激活路径
  component    String? // 组件路径
  permission   String      @unique // 权限标识，用于角色权限配置

  status    AvailableStatus @default(normal)
  remark    String?         @db.Text
  orderNo   Float?
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  parentMenu      SysMenu?         @relation("SysMenu_parent_SysMenu", fields: [parentMenuId], references: [id], onDelete: Cascade)
  children        SysMenu[]        @relation("SysMenu_parent_SysMenu")
  roleMenuConfigs RoleMenuConfig[]
}

/// 角色菜单配置
model RoleMenuConfig {
  id          String   @id @default(cuid())
  roleId      String
  sysMenuPerm String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  role    Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)
  sysMenu SysMenu @relation(fields: [sysMenuPerm], references: [permission], onDelete: Cascade)
}

/// 系统字典
model SysDict {
  id        String          @id @default(cuid())
  corpId    String
  category  SysDictCategory @default(select)
  name      String
  type      String
  remark    String?         @db.Text
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  corp Corporation @relation(fields: [corpId], references: [id], onDelete: Cascade)

  @@unique([corpId, type])
}

/// 系统字典数据
model SysDictData {
  id        String          @id @default(cuid())
  corpId    String
  sort      Float?
  key       String
  label     String
  value     String          @db.LongText
  type      String
  remark    String?         @db.Text
  extra     Json? /// 扩展信息，对于有些数据，可以配置支持的扩展
  status    AvailableStatus @default(normal) /// 当前状态
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt

  corp Corporation @relation(fields: [corpId], references: [id], onDelete: Cascade)
}
